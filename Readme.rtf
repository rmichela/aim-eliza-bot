{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12180\viewh11280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\qc

\f0\b\fs24 \cf0 JavaBot
\f1\b0 \
Copyright (C) 2003 Ryan Michela\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural
\cf0 \
I
\f0\b ntroduction:
\f1\b0 \
JavaBot is a chat bot for the AOL Instant Messanger system. It is designed to attempt to engage in conversation with people via IM. The bot supports such features as remote administration and full conversation logging. There is also a mechanism for eavesdropping on conversations other people are having with the bot. All administration is handled over IM thus allowing remote administration.\
\

\f0\b Manifest:
\f1\b0 \
Bot.jar - The compiled bot\
script - The bot script file\
StartBot.bat - A convenient way to start the bot form a Windows command prompt\
StartBot.csh - A convenient way to start the bot form a TCSH or BASH prompt\
/source - The source directory\
\

\f0\b Installation/Execution:
\f1\b0 \
First, a working version of the Java Runtime Environment is required. If you do not have a working copy of Java, visit java.sun.com or you OS manufacturer's website. If you are reading this file, you have completed the installation. To run the bot, navigate via command line to the bot's directory and type\

\f2 	java -jar Bot.jar SN PW
\f1 \
Substitute your AIM account screen name and password for SN and PW respectively. Alternatively, you can modify the commands in StartBot.bat or StartBot.csh to start the bot with a single command.\
\

\f0\b Administration:
\f1\b0 \
Once the bot has started, you administer it by sending it instant messages. The following is a list of commands you can send the bot:\

\f2 	#! = display this message\
	#!kill = kill server\
	#!attack SN = initiate conversation with SN\
	#!send SN message = interject message into conversation with SN\
	#!list = list active conversations\
	#!bind SN = watch conversation with SN\
	#!unbind SN = stop watching conversation with SN\
	#!warn = display the bot's current warning level\
	#!slap SN = warn SN\
	#!reauthent SN PW OldPW = reauthenticate the bot using SN and PW. \
		                     OldPW is the password of the current login\

\f1 Note: #!bind and #!unbind require the exact capitalization listed on the AIM server. Spaces are substituted with an underscore. Use the #!list command to get the exact screen names.
\f2 \

\f1 \

\f0\b Logs:
\f1\b0 \
The bot creates a ton of logs, all of which end in the .botlog extension. TOClog.botlog contains a recount of all the bot's internal activities. This information is also displayed at the command prompt during execution. xnone.botlog contains all of the message the bot was unable to identify. Use this file when expanding the bot's vocabulary. Conversation logs contain a recount off all conversations with the given person for the given date.\
\

\f0\b Scripting:
\f1\b0 \
The bot has a relatively simple scripting system based off of pre-processor commands, post-processor commands, synonym lists, and transformation rules.\
\
Pre-processor command are of the syntax:\
	
\f2 pre: word substitute
\f1 \
Where word is the word you want substituted with substitute.\
\
Post-processor commands are of the syntax:\
	
\f2 post: word substitute\
\

\f1 Synonym lists are of the syntax:\
	
\f2 synon: word synonym synonym ...
\f1 \
\
Rules are a bit more complex. They are generally of the syntax\
	
\f2 key: keyword rank-int\
		decomp: decomposition-rule\
			reasmb: reassembly-rule
\f1 \
The 
\f2 key:
\f1  block represents a rule. 
\f2 Keyword
\f1  is the keyword that the rule references. A rule will be referenced if its keyword is found in the input string. 
\f2 Rank-int
\f1  is the rank of the rule. The highest ranked rule in a set of matches is chosen to process the input.\
\
The 
\f2 decomp:
\f1  block represents a decomposition rule that will be matched against the input string. Decomposition rules are regular expressions made up of words and asterisks. Asterisks are used to take the place of zero or more words in the expression.  A decomposition rule will be used whenever its regular expression matches the input string. Words can be prefixed with 
\f2 @
\f1  to denote that synonyms for the word should be accepted per the synonym lists. Finally, all decomposition rules must end with an asterisk, although a lone asterisk is acceptable. Multiple decomposition rules are acceptable in one 
\f2 key:
\f1  block.\
\
The
\f2  reasmb:
\f1  block represents the reassembly rules. Reassembly rules are sentences with wild cards. The wild cards are in the form of numbers in parentheses that represent parts of the input that fill in the asterisks or synonyms of a decomposition rule. For example, (1) represents the part of the input string that fill the first asterisk in the decomposition rule. Reassembly rules can also be made of a
\f2  goto
\f1  statement. 
\f2 Goto
\f1  statements tell the bot to process another
\f2  key:
\f1  rule as if it had been selected initially. They are of the syntax:\
	
\f2 reasmb: goto someKey
\f1 \
Multiple reassembly rules are allowed in a 
\f2 decomp:
\f1  block.\
\
The bot also supports a limited memory. If it cannot find a matching key for an input string, it process the string in memory, assuming there is one. To have the bot put a string in memory, insert a
\f2  $ 
\f1 before the regular expression in a 
\f2 decomp:
\f1  rule. If that rule is run, the input string will also be stored in memory.\
\
A complete 
\f2 key:
\f1  block may look like the following:\
	
\f2 key: i 1\
		decomp: * i @belief i *\
			reasmb: Do you really think so?\
    			reasmb: Are you sure you (3).\
    			reasmb: Do you really doubt you (3)?\
  		decomp: * i* @belief *you *\
    			reasmb: goto you\
  		decomp: $ * i am *\
    			reasmb: How long have you been (2)?\
    			reasmb: Is it normal for you to be (2)?\
    			reasmb: Do you enjoy being (2)?\
    			reasmb: Do you know anyone else who is (2)?\
\

\f1 There are three more statements the bot supports, the 
\f2 quit:
\f1  and  
\f2 final:
\f1   statements. The 
\f2 quit:
\f1  statements specify what inputs will end a conversation with the bot. The 
\f2 final: 
\f1 statement tells the bot what to say when it ends a conversation. These statements take the form\
	
\f2 quit: word\
	final: closing statement\

\f1 Multiple quit statements are acceptable, but only the last final statement will be used.\
\

\f0\b Acknowledgments:
\f1\b0 \
Jeff Heaton for his LGPL JavaTOC library.  http://www.jeffheaton.com\
Charles Hayden for his Eliza program.  http://chayden.net\
\
}